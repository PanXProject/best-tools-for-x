name: Update Tool Awards

on:
  schedule:
    # Daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      award_type:
        description: 'Type of award to update (daily/weekly/monthly/yearly)'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - yearly

jobs:
  update-awards:
    runs-on: ubuntu-latest
    environment: Supabase
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js dayjs gray-matter
          
      - name: Create awards script
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/updateAwards.mjs << 'EOF'
          import { createClient } from '@supabase/supabase-js';
          import dayjs from 'dayjs';
          import utc from 'dayjs/plugin/utc.js';
          import timezone from 'dayjs/plugin/timezone.js';
          import { readFile, writeFile } from 'fs/promises';
          import { join } from 'path';
          import matter from 'gray-matter';

          dayjs.extend(utc);
          dayjs.extend(timezone);

          const TIMEZONE = 'UTC';
          const TOOLS_DIR = 'src/content/tools';
          const AR_TOOLS_DIR = 'src/content/tools/ar';

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY,
            {
              auth: {
                persistSession: false,
                autoRefreshToken: false
              }
            }
          );

          async function getToolUpvotes() {
            const { data: pages, error } = await supabase
              .from('pages')
              .select('id, total_upvotes, created_at');

            if (error) throw error;

            return pages.map(page => ({
              ...page,
              id: page.id.replace(/^tool?\//, '')
            }));
          }

function getPeriodDates(periodType, now) {
  switch (periodType) {
    case 'daily': {
      const yesterday = now.subtract(1, 'day');
      return {
        start: yesterday.startOf('day'),
        end: yesterday.endOf('day'),
        awardDate: yesterday.format('YYYY-MM-DD')
      };
    }
    case 'weekly': {
      const lastWeek = now.subtract(1, 'week');
      return {
        start: lastWeek.startOf('week'),
        end: lastWeek.endOf('week'),
        awardDate: lastWeek.endOf('week').format('YYYY-MM-DD')
      };
    }
    case 'monthly': {
      const lastMonth = now.subtract(1, 'month');
      return {
        start: lastMonth.startOf('month'),
        end: lastMonth.endOf('month'),
        awardDate: lastMonth.endOf('month').format('YYYY-MM-DD')
      };
    }
    case 'yearly': {
      const lastYear = now.subtract(1, 'year');
      return {
        start: lastYear.startOf('year'),
        end: lastYear.endOf('year'),
        awardDate: lastYear.endOf('year').format('YYYY-MM-DD')
      };
    }
  }
}
          async function determineWinners(tools, periodType, now) {
            const { start, end, awardDate } = getPeriodDates(periodType, now);

            console.log(`Determining ${periodType} winners for period:`, {
              start: start.format(),
              end: end.format(),
              awardDate
            });

            const eligibleTools = tools
              .filter(tool => {
                const toolDate = dayjs(tool.created_at).tz(TIMEZONE);
                return toolDate.isAfter(start) && toolDate.isBefore(end);
              })
              .sort((a, b) => b.total_upvotes - a.total_upvotes);

            const winners = [];
            let currentRank = 1;
            let previousUpvotes = -1;

            for (const tool of eligibleTools) {
              if (tool.total_upvotes === 0) continue;

              if (tool.total_upvotes !== previousUpvotes) {
                currentRank = winners.length + 1;
              }

              if (currentRank <= 3) {
                winners.push({
                  slug: tool.id,
                  total_upvotes: tool.total_upvotes,
                  rank: currentRank,
                  awardDate
                });
              }

              previousUpvotes = tool.total_upvotes;
            }

            return winners;
          }

          async function updateToolMdx(toolPath, awardType, rank, awardDate) {
            try {
              const content = await readFile(toolPath, 'utf-8');
              const { data, content: body } = matter(content);

              // Awards accumulate over time, never get removed
              const existingAwards = data.awards || [];
              const newAward = `${awardType}-award-${rank}-${awardDate}`;
              
              // Only add if this exact award doesn't already exist
              if (!existingAwards.includes(newAward)) {
                const updatedAwards = [...existingAwards, newAward];

                const updatedData = {
                  ...data,
                  awards: updatedAwards
                };

                const updatedContent = matter.stringify(body, updatedData);
                await writeFile(toolPath, updatedContent);
                console.log(`Added ${newAward} to ${toolPath}`);
              }
            } catch (error) {
              console.log(`Could not update ${toolPath}: ${error.message}`);
            }
          }

          async function main() {
            try {
              const now = dayjs().tz(TIMEZONE);
              const tools = await getToolUpvotes();
              
              // Determine which awards to update
              const awardType = process.env.AWARD_TYPE || 'daily';
              
              // Only run weekly on Sundays, monthly on 1st, yearly on Jan 1st
              if (awardType === 'daily' || 
                  (awardType === 'weekly' && now.day() === 0) ||
                  (awardType === 'monthly' && now.date() === 1) ||
                  (awardType === 'yearly' && now.month() === 0 && now.date() === 1)) {
                
                const winners = await determineWinners(tools, awardType, now);
                
                for (const winner of winners) {
                  await updateToolMdx(
                    join(TOOLS_DIR, `${winner.slug}.mdx`),
                    awardType,
                    winner.rank,
                    winner.awardDate
                  );
                  await updateToolMdx(
                    join(AR_TOOLS_DIR, `${winner.slug}.mdx`),
                    awardType,
                    winner.rank,
                    winner.awardDate
                  );
                }
                
                console.log(`${awardType} awards updated successfully`);
              } else {
                console.log(`Skipping ${awardType} awards update - not the right time`);
              }
            } catch (error) {
              console.error('Error in main execution:', error);
              process.exit(1);
            }
          }

          main().catch(error => {
            console.error('Unhandled error in main:', error);
            process.exit(1);
          });
          EOF

      - name: Run awards script
        run: |
          export SUPABASE_URL="${SUPABASE_URL}"
          export SUPABASE_ANON_KEY="${SUPABASE_ANON_KEY}"
          export AWARD_TYPE="${{ github.event.inputs.award_type || 'daily' }}"
          node .github/scripts/updateAwards.mjs
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/content/tools/
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update ${{ github.event.inputs.award_type || 'daily' }} awards [skip ci]" && git push)
