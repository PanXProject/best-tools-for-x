name: Update Tool Awards

on:
  schedule:
    # Daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      award_type:
        description: 'Type of award to update (daily/weekly/monthly/yearly)'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - yearly

jobs:
  update-awards:
    runs-on: ubuntu-latest
    environment: Supabase
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js dayjs gray-matter
          
      - name: Create awards script
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/updateAwards.mjs << 'EOF'
          import { createClient } from '@supabase/supabase-js';
          import dayjs from 'dayjs';
          import utc from 'dayjs/plugin/utc.js';
          import timezone from 'dayjs/plugin/timezone.js';
          import isSameOrAfter from 'dayjs/plugin/isSameOrAfter.js';
          import isSameOrBefore from 'dayjs/plugin/isSameOrBefore.js';
          import { readFile, writeFile } from 'fs/promises';
          import { join } from 'path';
          import matter from 'gray-matter';
          
          dayjs.extend(utc);
          dayjs.extend(timezone);
          dayjs.extend(isSameOrAfter);
          dayjs.extend(isSameOrBefore);
          
          const TIMEZONE = 'UTC';
          const TOOLS_DIR = 'src/content/tools';
          const AR_TOOLS_DIR = 'src/content/tools/ar';
          
          console.log('Environment check at start of script:');
          console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'exists' : 'not set');
          console.log('SUPABASE_ANON_KEY:', process.env.SUPABASE_ANON_KEY ? 'exists' : 'not set');
          
          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY,
            {
              auth: {
                persistSession: false,
                autoRefreshToken: false
              }
            }
          );
          
          async function getToolUpvotes() {
            console.log('Fetching tool upvotes...');
            const { data: pages, error } = await supabase
              .from('pages')
              .select('id, total_upvotes, created_at');
          
            if (error) throw error;
          
            const tools = pages.map(page => ({
              ...page,
              id: page.id.replace(/^tool?\//, '')
            }));
            
            console.log('Retrieved tools:', tools);
            return tools;
          }
          
          function getPeriodDates(periodType, now) {
            switch (periodType) {
              case 'daily': {
                const yesterday = now.subtract(1, 'day');
                return {
                  start: yesterday.startOf('day'),
                  end: yesterday.endOf('day'),
                  awardDate: yesterday.format('YYYY-MM-DD')
                };
              }
              case 'weekly': {
                const lastWeek = now.subtract(1, 'week');
                return {
                  start: lastWeek.startOf('week'),
                  end: lastWeek.endOf('week'),
                  awardDate: lastWeek.endOf('week').format('YYYY-MM-DD')
                };
              }
              case 'monthly': {
                const lastMonth = now.subtract(1, 'month');
                return {
                  start: lastMonth.startOf('month'),
                  end: lastMonth.endOf('month'),
                  awardDate: lastMonth.endOf('month').format('YYYY-MM-DD')
                };
              }
              case 'yearly': {
                const lastYear = now.subtract(1, 'year');
                return {
                  start: lastYear.startOf('year'),
                  end: lastYear.endOf('year'),
                  awardDate: lastYear.endOf('year').format('YYYY-MM-DD')
                };
              }
            }
          }
          
          async function determineWinners(tools, periodType, now) {
            const { start, end, awardDate } = getPeriodDates(periodType, now);
            
            console.log(`\nDetermining winners for ${periodType}`);
            console.log('Period:', { start: start.format(), end: end.format() });
          
            // Filter tools based on the specific time period
            const eligibleTools = tools
              .filter(tool => {
                const toolDate = dayjs(tool.created_at).tz(TIMEZONE);
                // Tool must be created before the end of the period
                // AND must be created within the relevant time frame for the award type
                return toolDate.isSameOrBefore(end) && 
                       toolDate.isSameOrBefore(start);  // Only consider tools that existed before the period started
              })
              .sort((a, b) => b.total_upvotes - a.total_upvotes);
          
            console.log('Eligible tools:', eligibleTools);
          
            const winners = [];
            let currentRank = 1;
            let previousUpvotes = -1;
          
            for (const tool of eligibleTools) {
              if (tool.total_upvotes === 0) continue;
          
              if (tool.total_upvotes !== previousUpvotes) {
                currentRank = winners.length + 1;
              }
          
              if (currentRank <= 3) {
                winners.push({
                  slug: tool.id,
                  total_upvotes: tool.total_upvotes,
                  rank: currentRank,
                  awardDate
                });
              }
          
              previousUpvotes = tool.total_upvotes;
            }
          
            console.log('Winners:', winners);
            return winners;
          }
          
          async function updateToolMdx(toolPath, awards) {
            try {
              console.log(`Updating ${toolPath} with awards:`, awards);
              const content = await readFile(toolPath, 'utf-8');
              const { data, content: body } = matter(content);
          
              const updatedData = {
                ...data,
                awards: awards
              };
          
              const updatedContent = matter.stringify(body, updatedData);
              await writeFile(toolPath, updatedContent);
              console.log(`Updated awards for ${toolPath}`);
            } catch (error) {
              console.log(`Could not update ${toolPath}: ${error.message}`);
            }
          }
          
          async function main() {
            try {
              console.log('Starting main execution...');
              const now = dayjs().tz(TIMEZONE);
              const tools = await getToolUpvotes();
          
              // Process all period types
              const periodTypes = ['daily', 'weekly', 'monthly', 'yearly'];
              const allWinners = {};
          
              for (const periodType of periodTypes) {
                allWinners[periodType] = await determineWinners(tools, periodType, now);
              }
          
              // Process winners and update files
              const processedTools = new Set();
          
              for (const [period, winners] of Object.entries(allWinners)) {
                for (const winner of winners) {
                  if (processedTools.has(winner.slug)) continue;
          
                  // Collect all awards for this tool
                  const toolAwards = [];
                  for (const [p, w] of Object.entries(allWinners)) {
                    const award = w.find(t => t.slug === winner.slug);
                    if (award) {
                      toolAwards.push(`${p}-award-${award.rank}-${award.awardDate}`);
                    }
                  }
          
                  // Update both regular and AR versions
                  await updateToolMdx(join(TOOLS_DIR, `${winner.slug}.mdx`), toolAwards);
                  await updateToolMdx(join(AR_TOOLS_DIR, `${winner.slug}.mdx`), toolAwards);
          
                  processedTools.add(winner.slug);
                }
              }
          
              console.log('Awards updated successfully');
            } catch (error) {
              console.error('Error in main execution:', error);
              process.exit(1);
            }
          }
          
          main().catch(error => {
            console.error('Unhandled error in main:', error);
            process.exit(1);
          });
          EOF
      - name: Debug Info
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of src/content/tools:"
          ls -la src/content/tools || echo "Directory not found"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "AWARD_TYPE: ${{ github.event.inputs.award_type || 'daily' }}"
          
      - name: Run awards script
        run: |
          export SUPABASE_URL="${SUPABASE_URL}"
          export SUPABASE_ANON_KEY="${SUPABASE_ANON_KEY}"
          export AWARD_TYPE="${{ github.event.inputs.award_type || 'daily' }}"
          # Run with Node.js in debug mode
          NODE_DEBUG=* node --trace-warnings .github/scripts/updateAwards.mjs 2>&1 | tee awards.log
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Show script output
        if: always()
        run: |
          echo "=== Script Output ==="
          cat awards.log || echo "No log file found"
          
      - name: Show git status
        if: always()
        run: |
          echo "=== Git Status ==="
          git status
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/content/tools/
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update ${{ github.event.inputs.award_type || 'daily' }} awards [skip ci]" && git push)

