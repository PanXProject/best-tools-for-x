name: Update Tool Awards

on:
  schedule:
    # Daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      award_type:
        description: 'Type of award to update (daily/weekly/monthly/yearly)'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - yearly

jobs:
  update-awards:
    runs-on: ubuntu-latest
    environment: Supabase
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js dayjs gray-matter
          
      - name: Create awards script
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/updateAwards.mjs << 'EOF'
          import { createClient } from '@supabase/supabase-js';
          import dayjs from 'dayjs';
          import utc from 'dayjs/plugin/utc.js';
          import timezone from 'dayjs/plugin/timezone.js';
          import isSameOrAfter from 'dayjs/plugin/isSameOrAfter.js';
          import isSameOrBefore from 'dayjs/plugin/isSameOrBefore.js';
          import { readFile, writeFile } from 'fs/promises';
          import { join } from 'path';
          import matter from 'gray-matter';
          import { existsSync } from 'fs';
          
          dayjs.extend(utc);
          dayjs.extend(timezone);
          dayjs.extend(isSameOrAfter);
          dayjs.extend(isSameOrBefore);
          
          const TIMEZONE = 'UTC';
          const TOOLS_DIR = 'src/content/tools';
          const AR_TOOLS_DIR = 'src/content/tools/ar';
          
          // Get the award type from environment variable
          const AWARD_TYPE = process.env.AWARD_TYPE || 'daily';
          
          console.log('Starting script with award type:', AWARD_TYPE);
          console.log('Environment check at start of script:');
          console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'exists' : 'not set');
          console.log('SUPABASE_ANON_KEY:', process.env.SUPABASE_ANON_KEY ? 'exists' : 'not set');
          
          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY, // Note: For profile lookups, ANON_KEY is usually sufficient.
                                            // If you run into RLS issues for `profiles` table, consider
                                            // using a service_role_key here, but be very cautious with its exposure.
            {
              auth: {
                persistSession: false,
                autoRefreshToken: false
              }
            }
          );
          
          /**
           * Reads the username from the MDX frontmatter of a given tool slug.
           * Assumes MDX files are located in 'src/content/tools' or 'src/content/tools/ar'.
           * @param {string} toolSlug - The slug of the tool (e.g., 'my-awesome-tool').
           * @returns {string | null} The username from the MDX frontmatter, or null if not found.
           */
          async function getToolUsername(toolSlug) {
              try {
                  let filePath;
                  // Try English directory first
                  const englishMdxPath = join(TOOLS_DIR, `${toolSlug}.mdx`);
                  if (existsSync(englishMdxPath)) {
                      filePath = englishMdxPath;
                  } else {
                      // Then try Arabic directory
                      const arabicMdxPath = join(AR_TOOLS_DIR, `${toolSlug}.mdx`);
                      if (existsSync(arabicMdxPath)) {
                          filePath = arabicMdxPath;
                      } else {
                          console.warn(`MDX file not found for toolSlug: ${toolSlug} in either English or Arabic directories.`);
                          return null;
                      }
                  }
          
                  const fileContent = await readFile(filePath, 'utf8');
                  const { data } = matter(fileContent);
                  if (data.username) {
                      return data.username;
                  } else {
                      console.warn(`'username' field not found in frontmatter for ${toolSlug} (${filePath}).`);
                      return null;
                  }
              } catch (error) {
                  console.error(`Error reading MDX or parsing frontmatter for ${toolSlug}:`, error.message);
                  return null;
              }
          }
          
          /**
           * Retrieves the user ID from the profiles table given a username.
           * @param {string} username - The username to look up.
           * @returns {string | null} The user ID (UUID) or null if not found.
           */
          async function getUserIdFromUsername(username) {
              if (!username) {
                  console.warn('Attempted to get user ID for an empty username.');
                  return null;
              }
              const { data, error } = await supabase
                  .from('profiles')
                  .select('id')
                  .eq('username', username)
                  .single();
          
              if (error) {
                  // If no row found, data will be null and error.message will be 'PGRST116: The result contains 0 rows'
                  if (error.code === 'PGRST116') {
                      console.warn(`User ID not found for username "${username}" in profiles table.`);
                  } else {
                      console.error(`Error fetching user ID for username "${username}":`, error.message);
                  }
                  return null;
              }
              return data ? data.id : null;
          }
          
          /**
           * Inserts award records into the Supabase awards table using upsert.
           * Prevents duplicate awards for the same slug/award_type/award_date.
           * @param {Array<Object>} winners - An array of winner objects, each with at least { slug, rank, awardDate }.
           * @param {string} awardType - The type of award (e.g., 'daily', 'weekly').
           */
          async function insertAwardsToSupabase(winners, awardType) {
              const awardsToInsert = [];
          
              for (const winner of winners) {
                  const username = await getToolUsername(winner.slug); // Await this call
                  if (!username) {
                      console.warn(`Skipping award for slug "${winner.slug}": Username not found in MDX or MDX file missing.`);
                      continue;
                  }
          
                  const userId = await getUserIdFromUsername(username); // Await this call
                  if (!userId) {
                      console.warn(`Skipping award for slug "${winner.slug}": User ID not found for username "${username}".`);
                      continue;
                  }
          
                  awardsToInsert.push({
                      slug: winner.slug,
                      user_id: userId,
                      award_type: awardType,
                      rank: winner.rank,
                      award_date: winner.awardDate, // Use the awardDate determined by getPeriodDates
                      notified: false, // Will be updated to true by the Edge Function
                  });
              }
          
              if (awardsToInsert.length === 0) {
                  console.log('No valid awards to insert into Supabase.');
                  return;
              }
          
              console.log(`Attempting to insert/upsert ${awardsToInsert.length} awards into Supabase...`);
              // Upsert logic: on conflict (slug, award_type, award_date), do nothing.
              // This prevents re-inserting the same award if the action runs multiple times for the same day.
              const { data, error } = await supabase
                  .from('awards')
                  .upsert(awardsToInsert, {
                      onConflict: 'slug, award_type, award_date',
                      ignoreDuplicates: true, // This is the key for "do nothing" on conflict
                  });
          
              if (error) {
                  console.error('Error inserting awards to Supabase:', error.message);
              } else {
                  console.log(`Successfully processed ${awardsToInsert.length} awards for insertion.`);
                  if (data && data.length > 0) {
                      console.log('New awards inserted/updated (IDs):', data.map(a => a.id));
                  } else {
                      console.log('No new awards were inserted (possibly all were duplicates from previous runs).');
                  }
              }
          }
          
          async function getToolUpvotes() {
            console.log('Fetching tool upvotes...');
            const { data: pages, error } = await supabase
              .from('pages')
              .select('id, total_upvotes');
          
            if (error) throw error;
          
            const tools = [];
            
            // Process each tool to include its publishDate from MDX
            for (const page of pages) {
              const id = page.id.replace(/^tool?\//, '');
              try {
                // First try to find the tool in the English directory
                const englishMdxPath = join(TOOLS_DIR, `${id}.mdx`);
                let content, publishDate;
                
                try {
                  content = await readFile(englishMdxPath, 'utf-8');
                  const { data } = matter(content);
                  publishDate = data.publishDate;
                } catch (error) {
                  console.log(`Could not find tool in English directory: ${id}`);
                  
                  // If not found in English, try Arabic directory
                  try {
                    const arabicMdxPath = join(AR_TOOLS_DIR, `${id}.mdx`);
                    content = await readFile(arabicMdxPath, 'utf-8');
                    const { data } = matter(content);
                    publishDate = data.publishDate;
                  } catch (arabicError) {
                    console.log(`Could not find tool in Arabic directory either: ${id}`);
                    // If not found in either directory, skip this tool
                    continue;
                  }
                }
                
                tools.push({
                  ...page,
                  id,
                  publishDate
                });
              } catch (error) {
                console.log(`Could not process ${id}: ${error.message}`);
              }
            }
            
            console.log('Retrieved tools:', tools.map(t => `${t.id} - Upvotes: ${t.total_upvotes} - Published: ${t.publishDate}`)); // More detailed log
            return tools;
          }
          
          function getPeriodDates(periodType, now) {
            console.log(`Getting period dates for ${periodType} at ${now.format()}`);
            
            switch (periodType) {
              case 'daily': {
                // For daily at midnight, look at previous day
                const previousDay = now.subtract(1, 'day');
                return {
                  start: previousDay.startOf('day'),
                  end: previousDay.endOf('day'),
                  awardDate: previousDay.format('YYYY-MM-DD')
                };
              }
              case 'weekly': {
                // For weekly at midnight Sunday, look at previous week
                const previousWeek = now.subtract(1, 'week');
                return {
                  start: previousWeek.startOf('week'),
                  end: previousWeek.endOf('week'),
                  awardDate: previousWeek.endOf('week').format('YYYY-MM-DD')
                };
              }
              case 'monthly': {
                // For monthly at midnight on 1st, look at previous month
                const previousMonth = now.subtract(1, 'month');
                return {
                  start: previousMonth.startOf('month'),
                  end: previousMonth.endOf('month'),
                  awardDate: previousMonth.endOf('month').format('YYYY-MM-DD')
                };
              }
              case 'yearly': {
                // For yearly at midnight on Jan 1st, look at previous year
                const previousYear = now.subtract(1, 'year');
                return {
                  start: previousYear.startOf('year'),
                  end: previousYear.endOf('year'),
                  awardDate: previousYear.endOf('year').format('YYYY-MM-DD')
                };
              }
            }
          }
                        
          async function determineWinners(tools, periodType, now) {
            const { start, end, awardDate } = getPeriodDates(periodType, now);
            
            console.log(`\nDetermining winners for ${periodType}`);
            console.log('Period:', { 
              start: start.format(), 
              end: end.format(),
              awardDate: awardDate
            });
            
            // Filter eligible tools
            const eligibleTools = tools
              .filter(tool => {
                const publishDate = dayjs(tool.publishDate).tz(TIMEZONE);
                return publishDate.isSameOrAfter(start) && publishDate.isSameOrBefore(end);
              })
              .filter(tool => tool.total_upvotes > 0); // Remove 0 upvote tools
            
            // Sort by upvotes descending
            eligibleTools.sort((a, b) => b.total_upvotes - a.total_upvotes);
            
            // Get unique upvote counts
            const uniqueUpvotes = [...new Set(eligibleTools.map(tool => tool.total_upvotes))];
            console.log('Unique upvote counts:', uniqueUpvotes);
            
            const winners = [];
            
            // Assign ranks based on unique upvote values
            uniqueUpvotes.forEach((upvoteCount, index) => {
              const rank = index + 1;
              if (rank <= 3) { // Only consider top 3 ranks
                const toolsWithThisUpvoteCount = eligibleTools.filter(
                  tool => tool.total_upvotes === upvoteCount
                );
                
                toolsWithThisUpvoteCount.forEach(tool => {
                  winners.push({
                    slug: tool.id,
                    total_upvotes: tool.total_upvotes,
                    rank: rank,
                    awardDate // Pass awardDate to the winner object
                  });
                });
              }
            });
            
            console.log('Final winners:', winners.map(w => 
              `${w.slug}: ${w.total_upvotes} upvotes, rank ${w.rank}, Award Date: ${w.awardDate}`
            )); // More detailed log
            
            return winners;
          }

          async function updateToolMdx(toolPath, newAward) {
            try {
              console.log(`Updating ${toolPath} with award:`, newAward);
              const content = await readFile(toolPath, 'utf-8');
              const { data, content: body } = matter(content);
            
              // Get existing awards or initialize empty array
              const existingAwards = data.awards || [];
              
              // Add new award if it doesn't exist
              if (!existingAwards.includes(newAward)) {
                const updatedData = {
                  ...data,
                  awards: [...existingAwards, newAward]
                };
            
                const updatedContent = matter.stringify(body, updatedData);
                await writeFile(toolPath, updatedContent);
                console.log(`Updated awards for ${toolPath}`);
              } else {
                console.log(`Award ${newAward} already exists for ${toolPath}`);
              }
            } catch (error) {
              console.log(`Could not update ${toolPath}: ${error.message}`);
            }
          }
          
          async function main() {
            try {
              console.log('Starting main execution...');
              const now = dayjs().tz(TIMEZONE);
              const tools = await getToolUpvotes();
            
              // Only process the specified award type
              console.log(`Processing ${AWARD_TYPE} awards only`);
              const winners = await determineWinners(tools, AWARD_TYPE, now);
            
              // --- NEW: Insert awards to Supabase ---
              await insertAwardsToSupabase(winners, AWARD_TYPE);
              // --- END NEW ---
          
              // Update files for winners
              for (const winner of winners) {
                const awardId = `${AWARD_TYPE}-award-${winner.rank}-${winner.awardDate}`; // Use winner.awardDate
                const englishMdxPath = join(TOOLS_DIR, `${winner.slug}.mdx`);
                const arabicMdxPath = join(AR_TOOLS_DIR, `${winner.slug}.mdx`);
                
                // Update English MDX if it exists
                if (existsSync(englishMdxPath)) {
                  await updateToolMdx(englishMdxPath, awardId);
                } else {
                  console.log(`English MDX not found for ${winner.slug}`);
                }
                
                // Update Arabic MDX if it exists
                if (existsSync(arabicMdxPath)) {
                  await updateToolMdx(arabicMdxPath, awardId);
                } else {
                  console.log(`Arabic MDX not found for ${winner.slug}`);
                }
              }
            
              console.log(`${AWARD_TYPE} awards updated successfully`);
            } catch (error) {
              console.error('Error in main execution:', error);
              process.exit(1);
            }
          }
          
          main().catch(error => {
            console.error('Unhandled error in main:', error);
            process.exit(1);
          });
          EOF
      - name: Debug Info
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of src/content/tools:"
          ls -la src/content/tools || echo "Directory not found"
          echo "Contents of src/content/tools/ar:"
          ls -la src/content/tools/ar || echo "Directory not found"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "AWARD_TYPE: ${{ github.event.inputs.award_type || 'daily' }}"
          
      - name: Run awards script
        run: |
          export SUPABASE_URL="${SUPABASE_URL}"
          export SUPABASE_ANON_KEY="${SUPABASE_ANON_KEY}"
          export AWARD_TYPE="${{ github.event.inputs.award_type || 'daily' }}"
          # Run with Node.js in debug mode
          NODE_DEBUG=* node --trace-warnings .github/scripts/updateAwards.mjs 2>&1 | tee awards.log
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Show script output
        if: always()
        run: |
          echo "=== Script Output ==="
          cat awards.log || echo "No log file found"
          
      - name: Show git status
        if: always()
        run: |
          echo "=== Git Status ==="
          git status
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/content/tools/
          git add src/content/tools/ar/
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update ${{ github.event.inputs.award_type || 'daily' }} awards [skip ci]" && git push)
